"""
[등굣길 문제 파악]  
1. 학교에서 집까지  
2. m x n 크기의 격자 무늬  
3. 집 좌표 : (1, 1) / 학교 좌표 : (m, n)4. 물에 잠긴 지역의 좌표를 담은 2차원 배열이 주어짐  
5. 오른쪽과 아래로만 움직일 수 있음  
6. 학교 to 집의 최단경로의 갯수를 '1,000,000,007'로 나눈 나머지를 return  
<조건사항>  
1. 격자의 크기 m, n은 1 이상 100 이하의 자연수  
- m과 n이 1이면 입력으로 주어지지 않는다!  
2. 물에 잠긴 지역은 0개 이상 10개 이하  
- 물에 잠긴 지역이 없을 수도 있다는 의미  
3. 집과 학교가 물에 잠긴 케이스는 없음!  
  
<입출력 예시>  
m: 4 / n: 3 / puddles: [[2, 2]] / return: 4  
  
[풀이방식]  
1. 이것은 DP문제  
2. 현위치의 위와 왼쪽의 가짓수를 더하면 현 위치에 올 수 있는 모든 갯수임  
3. 즉, [i][j] = [i-1][j] + [i][j-1]이 성립  
4. 이처럼 풀기 위해선 입력받은 m, n보다 1씩 크게 만들고 풀든가  
4-1. m, n을 -1 해놓고 생각해서 풀든가 해야한다 (집의 기준이 0,0이 아닌 1,1이니까)  
5. 그럴바엔 1씩 크게 해서 m+1, n+1로 푸는게 정신건강에 이롭겠다  
6. 그리고 물웅덩이는 가질 못하니까 그냥 모든 물웅덩이를 초반부터 -1 처리해놓고 나중에 -1이면 계산 안해버리면 됨  
  
<주의 사항>  
* 함정이 하나 있는데 입력값은 m, n이면서 배열로 만들 땐 n, m 사이즈의 지도가 되어야한다  
* 물웅덩이도 이를 고려해서 표기해야한다  
* 쉽게 말하면 x, y 좌표를 바꿔야한다는 것  
  
[개선사항]  
- 초반에 시도했을 때 정확성 테케만 다 맞고, 효용성은 0점 나옴..;;  
- 이에 아래와 같은 조치를 취했다  
map[i][j] += map[i - 1][j] + map[i][j - 1] 를  
map[i][j] += (map[i - 1][j] + map[i][j - 1]) % 1000000007 로 변경해줌  
- 어차피 나머지만 구할거니까 전체 총합을 구해서 나머지를 구하든 계속 나머지만 더하든 똑같지..  
- 1000000007 초과하기 전까진 어차피 나머지는 본인 자신일테니까  
- 또한 파이썬은 정수 오버플로우가 발생하지 않는데, 파이썬이 정수를 자동으로 필요한 만큼의 공간을 할당하여 저장하기 때문이다 (지식 +1)- 파이썬의 정수는 일반적으로 고정된 크기를 갖지 않고, 필요에 따라 동적으로 메모리를 할당받아 값을 저장 (지식 +2)
"""

def print_map(map):  
for _ in map:  
print(_)  
print("===================")  
  
  
def solution(m, n, puddles):  
map = [[0] * (m + 1) for _ in range(n + 1)] # 지도 초기화  
map[1][1] = 1 # 집 좌표 처리  
  
# 지도 물웅덩이 표기  
for puddle in puddles:  
y, x = puddle  
map[x][y] = -1  
  
# 배열의 크기가 n+1, m+1이라는 것을 잊어서는 안됨  
for i in range(1, n + 1):  
for j in range(1, m + 1):  
# 현 위치가 물웅덩이면 어차피 못 지나가니까 의미없다  
# 다만 다음 값들에 영향을 주지 않도록 0으로 리셋해두고 넘어가기!  
if map[i][j] == -1:  
map[i][j] = 0  
continue  
  
# 현 위치의 위쪽과 왼쪽에 올 수 있는 경우의 수를 다 더한다  
# 나 자신의 값을 더하는 것(+=)도 빼먹으면 안된다  
map[i][j] += (map[i - 1][j] + map[i][j - 1]) % 1000000007  
  
return map[n][m]  
  
  
if __name__ == '__main__':  
# 우선 인풋 값을 m, n, puddles로 나누기  
# input = input().split(' [')  
  
solution(4, 3, [[2, 2]])